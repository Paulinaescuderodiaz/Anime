import { Injectable } from '@angular/core';
import { Platform } from '@ionic/angular';
import { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx'

/**
 * ===================================================================================
 * SERVICIO DE BASE DE DATOS SQLITE - DatabaseService
 * ===================================================================================
 * 
 * DESCRIPCI√ìN GENERAL:
 * Este servicio es el n√∫cleo del sistema de persistencia de datos de la aplicaci√≥n.
 * Maneja todas las operaciones de base de datos SQLite para dispositivos m√≥viles.
 * 
 * ARQUITECTURA DE DATOS:
 * La aplicaci√≥n utiliza SQLite como base de datos local con las siguientes tablas:
 * 
 * 1. USUARIOS (usuarios):
 *    - id: Identificador √∫nico autoincremental
 *    - nombre: Nombre del usuario
 *    - email: Email √∫nico del usuario
 *    - password: Contrase√±a del usuario
 * 
 * 2. ANIMES (animes):
 *    - id: Identificador √∫nico autoincremental
 *    - titulo: T√≠tulo del anime
 *    - descripcion: Descripci√≥n/sinopsis del anime
 *    - imagen: URL o ruta de la imagen del anime
 * 
 * 3. RESE√ëAS (rese√±as):
 *    - id: Identificador √∫nico autoincremental
 *    - usuarioId: ID del usuario que hizo la rese√±a (FK)
 *    - animeId: ID del anime rese√±ado (FK)
 *    - calificacion: Calificaci√≥n num√©rica (1-5)
 *    - comentario: Comentario de la rese√±a
 * 
 * 4. LISTAS (listas):
 *    - id: Identificador √∫nico autoincremental
 *    - usuarioId: ID del usuario propietario (FK)
 *    - animeId: ID del anime en la lista (FK)
 *    - estado: Estado del anime (viendo, completado, pendiente, etc.)
 * 
 * FLUJO DE FUNCIONAMIENTO:
 * 1. Inicializaci√≥n: Crea la base de datos y tablas al arrancar la app
 * 2. Operaciones CRUD: Insertar, leer, actualizar y eliminar datos
 * 3. Relaciones: Mantiene integridad referencial entre tablas
 * 4. Consultas: Ejecuta queries SQL complejas para obtener datos espec√≠ficos
 * 
 * INTEGRACI√ìN CON OTROS SERVICIOS:
 * - AuthService: Para operaciones de usuarios
 * - ReviewService: Para gesti√≥n de rese√±as
 * - HomePage: Para mostrar datos en la interfaz
 * 
 * MANEJO DE ERRORES:
 * - Verificaci√≥n de conexi√≥n antes de operaciones
 * - Logs detallados para debugging
 * - Manejo graceful de errores de SQLite
 * 
 * DEPENDENCIAS:
 * - @awesome-cordova-plugins/sqlite: Plugin para SQLite en dispositivos m√≥viles
 * - @ionic/angular Platform: Para detectar cuando la plataforma est√° lista
 * 
 * ===================================================================================
 */
@Injectable({
  providedIn: 'root'
})
export class DatabaseService {
  /**
   * =================================================================================
   * PROPIEDADES PRIVADAS
   * =================================================================================
   */
  
  // Objeto de base de datos SQLite
  // Se inicializa cuando la plataforma est√° lista
  private db: SQLiteObject | null = null;

  /**
   * =================================================================================
   * CONSTRUCTOR E INYECCI√ìN DE DEPENDENCIAS
   * =================================================================================
   */
  constructor(
    private sqlite: SQLite,      // Servicio SQLite de Cordova
    private platform: Platform   // Servicio de plataforma de Ionic
  ) {}

  /**
   * =================================================================================
   * M√âTODO DE INICIALIZACI√ìN DE BASE DE DATOS
   * =================================================================================
   * 
   * FUNCI√ìN: crearBD()
   * 
   * DESCRIPCI√ìN:
   * Este es el m√©todo principal que inicializa la base de datos SQLite.
   * Se ejecuta al arrancar la aplicaci√≥n y crea todas las tablas necesarias.
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Esperar a que la plataforma est√© lista
   * 2. Crear la base de datos 'AniVerse.db'
   * 3. Crear tabla 'usuarios' con campos y restricciones
   * 4. Crear tabla 'animes' con campos b√°sicos
   * 5. Crear tabla 'rese√±as' con relaciones for√°neas
   * 6. Crear tabla 'listas' con relaciones for√°neas
   * 7. Confirmar creaci√≥n exitosa
   * 
   * MANEJO DE ERRORES:
   * - Si falla la creaci√≥n, lanza el error para que sea manejado por el llamador
   * - Logs detallados para debugging
   * 
   * EJEMPLO DE USO:
   * await databaseService.crearBD(); // Se llama desde app.component.ts
   * 
   * =================================================================================
   */
  async crearBD() {
    try {
      /**
       * PASO 1: ESPERAR PLATAFORMA LISTA
       * Asegura que el dispositivo est√© completamente inicializado
       */
      await this.platform.ready();
      console.log('‚úÖ Platform ready, iniciando creaci√≥n de base de datos...');

      /**
       * PASO 2: CREAR BASE DE DATOS SQLITE
       * Crea la base de datos 'AniVerse.db' en la ubicaci√≥n por defecto
       */
      this.db = await this.sqlite.create({
        name: 'AniVerse.db',    // Nombre de la base de datos
        location: 'default'     // Ubicaci√≥n por defecto del dispositivo
      });
      console.log('‚úÖ Base de datos creada exitosamente');

      /**
       * PASO 3: CREAR TABLA DE USUARIOS
       * Tabla principal para almacenar informaci√≥n de usuarios registrados
       */
      await this.db.executeSql(`
        CREATE TABLE IF NOT EXISTS usuarios (
          id INTEGER PRIMARY KEY AUTOINCREMENT,  -- ID √∫nico autoincremental
          nombre TEXT,                          -- Nombre del usuario
          email TEXT UNIQUE,                    -- Email √∫nico (restricci√≥n de unicidad)
          password TEXT                         -- Contrase√±a del usuario
        );
      `, []);

      /**
       * PASO 4: CREAR TABLA DE ANIMES
       * Tabla para almacenar informaci√≥n de animes (tanto de API como creados por usuarios)
       */
      await this.db.executeSql(`
        CREATE TABLE IF NOT EXISTS animes (
          id INTEGER PRIMARY KEY AUTOINCREMENT,  -- ID √∫nico autoincremental
          titulo TEXT,                          -- T√≠tulo del anime
          descripcion TEXT,                     -- Descripci√≥n/sinopsis
          imagen TEXT                           -- URL o ruta de imagen
        );
      `, []);

      /**
       * PASO 5: CREAR TABLA DE RESE√ëAS
       * Tabla para almacenar rese√±as de usuarios sobre animes
       * Incluye relaciones for√°neas para mantener integridad referencial
       */
      await this.db.executeSql(`
        CREATE TABLE IF NOT EXISTS rese√±as (
          id INTEGER PRIMARY KEY AUTOINCREMENT,  -- ID √∫nico autoincremental
          usuarioId INTEGER,                    -- ID del usuario (FK)
          animeId INTEGER,                      -- ID del anime (FK)
          calificacion INTEGER,                 -- Calificaci√≥n 1-5
          comentario TEXT,                      -- Comentario de la rese√±a
          FOREIGN KEY(usuarioId) REFERENCES usuarios(id),  -- Relaci√≥n con usuarios
          FOREIGN KEY(animeId) REFERENCES animes(id)        -- Relaci√≥n con animes
        );
      `, []);

      /**
       * PASO 6: CREAR TABLA DE LISTAS
       * Tabla para almacenar listas personalizadas de animes por usuario
       * Permite a los usuarios organizar animes por estado (viendo, completado, etc.)
       */
      await this.db.executeSql(`
        CREATE TABLE IF NOT EXISTS listas (
          id INTEGER PRIMARY KEY AUTOINCREMENT,  -- ID √∫nico autoincremental
          usuarioId INTEGER,                    -- ID del usuario propietario (FK)
          animeId INTEGER,                      -- ID del anime en la lista (FK)
          estado TEXT,                          -- Estado del anime (viendo, completado, pendiente)
          FOREIGN KEY(usuarioId) REFERENCES usuarios(id),  -- Relaci√≥n con usuarios
          FOREIGN KEY(animeId) REFERENCES animes(id)       -- Relaci√≥n con animes
        );
      `, []);

      console.log('‚úÖ Base de datos y tablas creadas exitosamente');
      
    } catch (e) {
      console.error('‚ùå Error creando la base de datos:', e);
      throw e; // Re-lanzar el error para que sea manejado por el llamador
    }
  }

  /**
   * =================================================================================
   * M√âTODOS CRUD PARA GESTI√ìN DE USUARIOS
   * =================================================================================
   */

  /**
   * FUNCI√ìN: registrarUsuario()
   * 
   * DESCRIPCI√ìN:
   * Registra un nuevo usuario en la base de datos SQLite.
   * 
   * PAR√ÅMETROS:
   * @param nombre - Nombre del usuario
   * @param email - Email √∫nico del usuario
   * @param password - Contrase√±a del usuario
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar INSERT con par√°metros preparados
   * 3. Manejar errores de unicidad de email
   * 
   * EJEMPLO DE USO:
   * await databaseService.registrarUsuario('Juan', 'juan@email.com', 'password123');
   * 
   * =================================================================================
   */
  async registrarUsuario(nombre: string, email: string, password: string) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return;
    }
    
    console.log('üîÑ Registrando usuario:', email);
    await this.db.executeSql(
      `INSERT INTO usuarios (nombre, email, password) VALUES (?, ?, ?)`,
      [nombre, email, password]
    );
    console.log('‚úÖ Usuario registrado exitosamente');
  }

  /**
   * FUNCI√ìN: login()
   * 
   * DESCRIPCI√ìN:
   * Autentica un usuario buscando sus credenciales en la base de datos.
   * 
   * PAR√ÅMETROS:
   * @param email - Email del usuario
   * @param password - Contrase√±a del usuario
   * 
   * RETORNA:
   * @returns any - Datos del usuario si las credenciales son correctas, null si no
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar SELECT con WHERE para email y password
   * 3. Retornar el primer resultado o null
   * 
   * EJEMPLO DE USO:
   * const user = await databaseService.login('juan@email.com', 'password123');
   * if (user) { console.log('Login exitoso'); }
   * 
   * =================================================================================
   */
  async login(email: string, password: string) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return null;
    }
    
    console.log('üîç Buscando usuario:', email);
    const res = await this.db.executeSql(
      `SELECT * FROM usuarios WHERE email = ? AND password = ?`,
      [email, password]
    );
    
    const user = res.rows.length > 0 ? res.rows.item(0) : null;
    console.log(user ? '‚úÖ Usuario encontrado' : '‚ùå Usuario no encontrado');
    return user;
  }

  /**
   * FUNCI√ìN: getUserByEmail()
   * 
   * DESCRIPCI√ìN:
   * Busca un usuario espec√≠fico por su email.
   * 
   * PAR√ÅMETROS:
   * @param email - Email del usuario a buscar
   * 
   * RETORNA:
   * @returns any - Datos del usuario si existe, null si no
   * 
   * USO T√çPICO:
   * - Verificar si un usuario ya existe antes de registrar
   * - Obtener datos completos del usuario para operaciones
   * 
   * EJEMPLO DE USO:
   * const user = await databaseService.getUserByEmail('juan@email.com');
   * if (user) { console.log('Usuario existe:', user.nombre); }
   * 
   * =================================================================================
   */
  async getUserByEmail(email: string) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return null;
    }
    
    console.log('üîç Buscando usuario por email:', email);
    const res = await this.db.executeSql(
      `SELECT * FROM usuarios WHERE email = ?`,
      [email]
    );
    
    const user = res.rows.length > 0 ? res.rows.item(0) : null;
    console.log(user ? '‚úÖ Usuario encontrado' : '‚ùå Usuario no encontrado');
    return user;
  }

  /**
   * =================================================================================
   * M√âTODOS CRUD PARA GESTI√ìN DE RESE√ëAS
   * =================================================================================
   */

  /**
   * FUNCI√ìN: agregarRese√±a()
   * 
   * DESCRIPCI√ìN:
   * Agrega una nueva rese√±a de un usuario sobre un anime.
   * 
   * PAR√ÅMETROS:
   * @param usuarioId - ID del usuario que hace la rese√±a
   * @param animeId - ID del anime rese√±ado
   * @param calificacion - Calificaci√≥n num√©rica (1-5)
   * @param comentario - Comentario de la rese√±a
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar INSERT en tabla rese√±as
   * 3. Mantener integridad referencial con usuarios y animes
   * 
   * EJEMPLO DE USO:
   * await databaseService.agregarRese√±a(1, 123, 5, 'Excelente anime!');
   * 
   * =================================================================================
   */
  async agregarRese√±a(usuarioId: number, animeId: number, calificacion: number, comentario: string) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return;
    }
    
    console.log('üîÑ Agregando rese√±a para anime:', animeId);
    await this.db.executeSql(
      `INSERT INTO rese√±as (usuarioId, animeId, calificacion, comentario) VALUES (?, ?, ?, ?)`,
      [usuarioId, animeId, calificacion, comentario]
    );
    console.log('‚úÖ Rese√±a agregada exitosamente');
  }

  /**
   * FUNCI√ìN: obtenerRese√±as()
   * 
   * DESCRIPCI√ìN:
   * Obtiene todas las rese√±as de un anime espec√≠fico con informaci√≥n del usuario.
   * 
   * PAR√ÅMETROS:
   * @param animeId - ID del anime del cual obtener rese√±as
   * 
   * RETORNA:
   * @returns any[] - Array de rese√±as con datos del usuario
   * 
   * FLUJO:
   * 1. Ejecutar JOIN entre tablas rese√±as y usuarios
   * 2. Filtrar por animeId
   * 3. Ordenar por fecha de creaci√≥n (m√°s recientes primero)
   * 4. Retornar array de objetos
   * 
   * EJEMPLO DE USO:
   * const rese√±as = await databaseService.obtenerRese√±as(123);
   * rese√±as.forEach(r => console.log(r.comentario));
   * 
   * =================================================================================
   */
  async obtenerRese√±as(animeId: number) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return [];
    }
    
    console.log('üîç Obteniendo rese√±as para anime:', animeId);
    const res = await this.db.executeSql(
      `SELECT r.*, u.nombre FROM rese√±as r JOIN usuarios u ON r.usuarioId = u.id WHERE animeId = ? ORDER BY r.id DESC`,
      [animeId]
    );
    
    const rese√±as = [];
    for (let i = 0; i < res.rows.length; i++) {
      rese√±as.push(res.rows.item(i));
    }
    
    console.log(`‚úÖ Obtenidas ${rese√±as.length} rese√±as`);
    return rese√±as;
  }

  /**
   * FUNCI√ìN: obtenerRese√±asPorUsuario()
   * 
   * DESCRIPCI√ìN:
   * Obtiene todas las rese√±as realizadas por un usuario espec√≠fico.
   * 
   * PAR√ÅMETROS:
   * @param usuarioId - ID del usuario del cual obtener rese√±as
   * 
   * RETORNA:
   * @returns any[] - Array de rese√±as con datos del anime
   * 
   * FLUJO:
   * 1. Ejecutar JOIN entre tablas rese√±as y animes
   * 2. Filtrar por usuarioId
   * 3. Ordenar por fecha de creaci√≥n (m√°s recientes primero)
   * 4. Retornar array de objetos
   * 
   * EJEMPLO DE USO:
   * const misRese√±as = await databaseService.obtenerRese√±asPorUsuario(1);
   * misRese√±as.forEach(r => console.log(r.animeTitulo));
   * 
   * =================================================================================
   */
  async obtenerRese√±asPorUsuario(usuarioId: number) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return [];
    }
    
    console.log('üîç Obteniendo rese√±as para usuario:', usuarioId);
    const res = await this.db.executeSql(
      `SELECT r.*, a.titulo as animeTitulo FROM rese√±as r JOIN animes a ON r.animeId = a.id WHERE usuarioId = ? ORDER BY r.id DESC`,
      [usuarioId]
    );
    
    const rese√±as = [];
    for (let i = 0; i < res.rows.length; i++) {
      rese√±as.push(res.rows.item(i));
    }
    
    console.log(`‚úÖ Obtenidas ${rese√±as.length} rese√±as del usuario`);
    return rese√±as;
  }

  /**
   * FUNCI√ìN: actualizarRese√±a()
   * 
   * DESCRIPCI√ìN:
   * Actualiza una rese√±a existente con nuevos datos.
   * 
   * PAR√ÅMETROS:
   * @param rese√±aId - ID de la rese√±a a actualizar
   * @param datos - Objeto con los nuevos datos (calificacion, comentario)
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar UPDATE con los nuevos datos
   * 3. Confirmar actualizaci√≥n exitosa
   * 
   * EJEMPLO DE USO:
   * await databaseService.actualizarRese√±a(1, { calificacion: 4, comentario: 'Muy bueno' });
   * 
   * =================================================================================
   */
  async actualizarRese√±a(rese√±aId: number, datos: any) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return;
    }
    
    console.log('üîÑ Actualizando rese√±a:', rese√±aId);
    await this.db.executeSql(
      `UPDATE rese√±as SET calificacion = ?, comentario = ? WHERE id = ?`,
      [datos.calificacion, datos.comentario, rese√±aId]
    );
    console.log('‚úÖ Rese√±a actualizada exitosamente');
  }

  /**
   * FUNCI√ìN: eliminarRese√±a()
   * 
   * DESCRIPCI√ìN:
   * Elimina una rese√±a espec√≠fica de la base de datos.
   * 
   * PAR√ÅMETROS:
   * @param rese√±aId - ID de la rese√±a a eliminar
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar DELETE con el ID espec√≠fico
   * 3. Confirmar eliminaci√≥n exitosa
   * 
   * EJEMPLO DE USO:
   * await databaseService.eliminarRese√±a(1);
   * 
   * =================================================================================
   */
  async eliminarRese√±a(rese√±aId: number) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return;
    }
    
    console.log('üîÑ Eliminando rese√±a:', rese√±aId);
    await this.db.executeSql(
      `DELETE FROM rese√±as WHERE id = ?`,
      [rese√±aId]
    );
    console.log('‚úÖ Rese√±a eliminada exitosamente');
  }

  /**
   * =================================================================================
   * M√âTODOS DE CONSULTAS AVANZADAS
   * =================================================================================
   */

  /**
   * FUNCI√ìN: obtenerCalificacionPromedio()
   * 
   * DESCRIPCI√ìN:
   * Calcula la calificaci√≥n promedio de un anime basada en todas sus rese√±as.
   * 
   * PAR√ÅMETROS:
   * @param animeId - ID del anime del cual calcular promedio
   * 
   * RETORNA:
   * @returns number - Calificaci√≥n promedio (0 si no hay rese√±as)
   * 
   * FLUJO:
   * 1. Ejecutar funci√≥n AVG() de SQL
   * 2. Filtrar por animeId
   * 3. Retornar promedio o 0 si no hay datos
   * 
   * EJEMPLO DE USO:
   * const promedio = await databaseService.obtenerCalificacionPromedio(123);
   * console.log('Calificaci√≥n promedio:', promedio);
   * 
   * =================================================================================
   */
  async obtenerCalificacionPromedio(animeId: number) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return 0;
    }
    
    console.log('üîç Calculando calificaci√≥n promedio para anime:', animeId);
    const res = await this.db.executeSql(
      `SELECT AVG(calificacion) as promedio FROM rese√±as WHERE animeId = ?`,
      [animeId]
    );
    
    const promedio = res.rows.length > 0 ? res.rows.item(0).promedio || 0 : 0;
    console.log('‚úÖ Calificaci√≥n promedio calculada:', promedio);
    return promedio;
  }

  /**
   * FUNCI√ìN: usuarioYaRese√±o()
   * 
   * DESCRIPCI√ìN:
   * Verifica si un usuario ya ha rese√±ado un anime espec√≠fico.
   * 
   * PAR√ÅMETROS:
   * @param usuarioId - ID del usuario
   * @param animeId - ID del anime
   * 
   * RETORNA:
   * @returns boolean - true si ya rese√±√≥, false si no
   * 
   * FLUJO:
   * 1. Ejecutar COUNT() para contar rese√±as del usuario para el anime
   * 2. Retornar true si count > 0, false si no
   * 
   * USO T√çPICO:
   * - Evitar rese√±as duplicadas
   * - Mostrar opci√≥n de editar en lugar de crear nueva
   * 
   * EJEMPLO DE USO:
   * const yaRese√±o = await databaseService.usuarioYaRese√±o(1, 123);
   * if (yaRese√±o) { console.log('Ya rese√±√≥ este anime'); }
   * 
   * =================================================================================
   */
  async usuarioYaRese√±o(usuarioId: number, animeId: number) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return false;
    }
    
    console.log('üîç Verificando si usuario ya rese√±√≥ anime:', usuarioId, animeId);
    const res = await this.db.executeSql(
      `SELECT COUNT(*) as count FROM rese√±as WHERE usuarioId = ? AND animeId = ?`,
      [usuarioId, animeId]
    );
    
    const yaRese√±o = res.rows.length > 0 ? res.rows.item(0).count > 0 : false;
    console.log(yaRese√±o ? '‚úÖ Usuario ya rese√±√≥ este anime' : '‚ùå Usuario no ha rese√±ado este anime');
    return yaRese√±o;
  }

  /**
   * FUNCI√ìN: insertarAnimeTemporal()
   * 
   * DESCRIPCI√ìN:
   * Inserta un anime temporal en la base de datos para rese√±as creadas por usuarios.
   * 
   * PAR√ÅMETROS:
   * @param id - ID √∫nico del anime (usualmente timestamp)
   * @param titulo - T√≠tulo del anime
   * @param descripcion - Descripci√≥n del anime
   * @param imagen - URL o ruta de la imagen
   * 
   * FLUJO:
   * 1. Verificar que la base de datos est√© inicializada
   * 2. Ejecutar INSERT en tabla animes
   * 3. Confirmar inserci√≥n exitosa
   * 
   * USO T√çPICO:
   * - Cuando un usuario crea una rese√±a para un anime que no est√° en la API
   * - Crear referencias temporales para mantener integridad referencial
   * 
   * EJEMPLO DE USO:
   * await databaseService.insertarAnimeTemporal(123456, 'Mi Anime', 'Descripci√≥n', 'imagen.jpg');
   * 
   * =================================================================================
   */
  async insertarAnimeTemporal(id: number, titulo: string, descripcion: string, imagen: string) {
    if (!this.db) {
      console.error('‚ùå Base de datos no inicializada');
      return;
    }
    
    console.log('üîÑ Insertando anime temporal:', titulo);
    await this.db.executeSql(
      `INSERT INTO animes (id, titulo, descripcion, imagen) VALUES (?, ?, ?, ?)`,
      [id, titulo, descripcion, imagen]
    );
    console.log('‚úÖ Anime temporal insertado exitosamente');
  }
}
