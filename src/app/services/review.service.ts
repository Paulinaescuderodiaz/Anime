import { Injectable } from '@angular/core';
import { DatabaseService } from './database';

/**
 * ===================================================================================
 * INTERFAZ DE RESE√ëA - Review
 * ===================================================================================
 * 
 * DESCRIPCI√ìN:
 * Define la estructura de datos para las rese√±as de animes en la aplicaci√≥n.
 * 
 * PROPIEDADES:
 * - id?: ID √∫nico de la rese√±a (opcional, se genera autom√°ticamente)
 * - usuarioId: ID del usuario que hizo la rese√±a (obligatorio)
 * - animeId: ID del anime rese√±ado (obligatorio)
 * - calificacion: Calificaci√≥n num√©rica del 1 al 5 (obligatorio)
 * - comentario: Comentario de la rese√±a (obligatorio)
 * - fecha?: Fecha de creaci√≥n de la rese√±a (opcional, se genera autom√°ticamente)
 * - nombreUsuario?: Nombre del usuario (opcional, se obtiene del JOIN)
 * 
 * USO T√çPICO:
 * - Crear nuevas rese√±as
 * - Actualizar rese√±as existentes
 * - Obtener datos de rese√±as desde la base de datos
 * 
 * EJEMPLO DE USO:
 * const review: Review = {
 *   usuarioId: 1,
 *   animeId: 123,
 *   calificacion: 5,
 *   comentario: 'Excelente anime!'
 * };
 * 
 * ===================================================================================
 */
export interface Review {
  id?: number;              // ID √∫nico de la rese√±a
  usuarioId: number;        // ID del usuario que hizo la rese√±a
  animeId: number;          // ID del anime rese√±ado
  calificacion: number;     // Calificaci√≥n del 1 al 5
  comentario: string;       // Comentario de la rese√±a
  fecha?: string;           // Fecha de creaci√≥n
  nombreUsuario?: string;   // Nombre del usuario (obtenido del JOIN)
}

/**
 * ===================================================================================
 * SERVICIO DE GESTI√ìN DE RESE√ëAS - ReviewService
 * ===================================================================================
 * 
 * DESCRIPCI√ìN GENERAL:
 * Este servicio act√∫a como una capa de abstracci√≥n entre los componentes de la UI
 * y el DatabaseService para todas las operaciones relacionadas con rese√±as.
 * 
 * ARQUITECTURA:
 * - Capa de abstracci√≥n sobre DatabaseService
 * - Manejo centralizado de operaciones CRUD de rese√±as
 * - Interfaz consistente para todos los componentes
 * - Manejo de errores unificado
 * 
 * FUNCIONALIDADES PRINCIPALES:
 * 1. Crear nuevas rese√±as
 * 2. Obtener rese√±as por anime
 * 3. Obtener rese√±as por usuario
 * 4. Actualizar rese√±as existentes
 * 5. Eliminar rese√±as
 * 6. Calcular calificaciones promedio
 * 7. Verificar si un usuario ya rese√±√≥ un anime
 * 
 * INTEGRACI√ìN CON OTROS SERVICIOS:
 * - DatabaseService: Para operaciones de base de datos SQLite
 * - AuthService: Para obtener informaci√≥n del usuario actual
 * - AddReviewPage: Para crear nuevas rese√±as
 * - HomePage: Para mostrar rese√±as en la interfaz
 * - MyReviewsPage: Para gestionar rese√±as del usuario
 * 
 * MANEJO DE ERRORES:
 * - Captura errores de base de datos
 * - Retorna valores por defecto en caso de error
 * - Logs detallados para debugging
 * 
 * ===================================================================================
 */
@Injectable({
  providedIn: 'root'
})
export class ReviewService {

  /**
   * =================================================================================
   * CONSTRUCTOR E INYECCI√ìN DE DEPENDENCIAS
   * =================================================================================
   */
  constructor(private databaseService: DatabaseService) {}

  /**
   * =================================================================================
   * M√âTODO DE CREACI√ìN DE RESE√ëAS
   * =================================================================================
   * 
   * FUNCI√ìN: createReview()
   * 
   * DESCRIPCI√ìN:
   * Crea una nueva rese√±a en la base de datos SQLite.
   * 
   * PAR√ÅMETROS:
   * @param review - Objeto Review sin id ni fecha (se generan autom√°ticamente)
   * 
   * RETORNA:
   * @returns Promise<boolean> - true si la creaci√≥n fue exitosa, false si fall√≥
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Validar que el objeto review tenga los campos obligatorios
   * 2. Llamar al DatabaseService para insertar la rese√±a
   * 3. Manejar errores y retornar resultado
   * 
   * MANEJO DE ERRORES:
   * - Error de base de datos: Retorna false
   * - Logs detallados para debugging
   * 
   * EJEMPLO DE USO:
   * const reviewData = {
   *   usuarioId: 1,
   *   animeId: 123,
   *   calificacion: 5,
   *   comentario: 'Excelente anime!'
   * };
   * const success = await reviewService.createReview(reviewData);
   * 
   * =================================================================================
   */
  async createReview(review: Omit<Review, 'id' | 'fecha'>): Promise<boolean> {
    try {
      console.log('üîÑ Creando nueva rese√±a para anime:', review.animeId);
      
      /**
       * PASO 1: INSERTAR RESE√ëA EN BASE DE DATOS
       * Usa el DatabaseService para realizar la inserci√≥n
       */
      await this.databaseService.agregarRese√±a(
        review.usuarioId,
        review.animeId,
        review.calificacion,
        review.comentario
      );
      
      console.log('‚úÖ Rese√±a creada exitosamente');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error creando rese√±a:', error);
      return false;
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE OBTENCI√ìN DE RESE√ëAS POR ANIME
   * =================================================================================
   * 
   * FUNCI√ìN: getReviewsByAnime()
   * 
   * DESCRIPCI√ìN:
   * Obtiene todas las rese√±as de un anime espec√≠fico con informaci√≥n del usuario.
   * 
   * PAR√ÅMETROS:
   * @param animeId - ID del anime del cual obtener rese√±as
   * 
   * RETORNA:
   * @returns Promise<Review[]> - Array de rese√±as con datos del usuario
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Llamar al DatabaseService para obtener rese√±as
   * 2. Manejar errores y retornar array vac√≠o si falla
   * 3. Retornar array de rese√±as con datos del usuario
   * 
   * DATOS INCLUIDOS:
   * - Informaci√≥n completa de la rese√±a
   * - Nombre del usuario que hizo la rese√±a
   * - Ordenadas por fecha (m√°s recientes primero)
   * 
   * EJEMPLO DE USO:
   * const rese√±as = await reviewService.getReviewsByAnime(123);
   * rese√±as.forEach(r => console.log(`${r.nombreUsuario}: ${r.comentario}`));
   * 
   * =================================================================================
   */
  async getReviewsByAnime(animeId: number): Promise<Review[]> {
    try {
      console.log('üîç Obteniendo rese√±as para anime:', animeId);
      
      /**
       * PASO 1: OBTENER RESE√ëAS DESDE BASE DE DATOS
       * Usa el DatabaseService para realizar la consulta con JOIN
       */
      const rese√±as = await this.databaseService.obtenerRese√±as(animeId);
      
      console.log(`‚úÖ Obtenidas ${rese√±as.length} rese√±as para el anime`);
      return rese√±as;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo rese√±as:', error);
      return [];
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE OBTENCI√ìN DE RESE√ëAS POR USUARIO
   * =================================================================================
   * 
   * FUNCI√ìN: getReviewsByUser()
   * 
   * DESCRIPCI√ìN:
   * Obtiene todas las rese√±as realizadas por un usuario espec√≠fico.
   * 
   * PAR√ÅMETROS:
   * @param userId - ID del usuario del cual obtener rese√±as
   * 
   * RETORNA:
   * @returns Promise<Review[]> - Array de rese√±as con datos del anime
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Llamar al DatabaseService para obtener rese√±as del usuario
   * 2. Manejar errores y retornar array vac√≠o si falla
   * 3. Retornar array de rese√±as con datos del anime
   * 
   * DATOS INCLUIDOS:
   * - Informaci√≥n completa de la rese√±a
   * - T√≠tulo del anime rese√±ado
   * - Ordenadas por fecha (m√°s recientes primero)
   * 
   * USO T√çPICO:
   * - Mostrar rese√±as del usuario en "Mis Rese√±as"
   * - Permitir editar/eliminar rese√±as propias
   * - Generar estad√≠sticas del usuario
   * 
   * EJEMPLO DE USO:
   * const misRese√±as = await reviewService.getReviewsByUser(1);
   * misRese√±as.forEach(r => console.log(`Rese√±√©: ${r.animeTitulo}`));
   * 
   * =================================================================================
   */
  async getReviewsByUser(userId: number): Promise<Review[]> {
    try {
      console.log('üîç Obteniendo rese√±as para usuario:', userId);
      
      /**
       * PASO 1: OBTENER RESE√ëAS DESDE BASE DE DATOS
       * Usa el DatabaseService para realizar la consulta con JOIN
       */
      const rese√±as = await this.databaseService.obtenerRese√±asPorUsuario(userId);
      
      console.log(`‚úÖ Obtenidas ${rese√±as.length} rese√±as del usuario`);
      return rese√±as;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo rese√±as del usuario:', error);
      return [];
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE ACTUALIZACI√ìN DE RESE√ëAS
   * =================================================================================
   * 
   * FUNCI√ìN: updateReview()
   * 
   * DESCRIPCI√ìN:
   * Actualiza una rese√±a existente con nuevos datos.
   * 
   * PAR√ÅMETROS:
   * @param reviewId - ID de la rese√±a a actualizar
   * @param review - Objeto con los nuevos datos (calificacion, comentario)
   * 
   * RETORNA:
   * @returns Promise<boolean> - true si la actualizaci√≥n fue exitosa, false si fall√≥
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Validar que reviewId sea v√°lido
   * 2. Llamar al DatabaseService para actualizar la rese√±a
   * 3. Manejar errores y retornar resultado
   * 
   * CAMPOS ACTUALIZABLES:
   * - calificacion: Nueva calificaci√≥n del 1 al 5
   * - comentario: Nuevo comentario de la rese√±a
   * 
   * EJEMPLO DE USO:
   * const success = await reviewService.updateReview(1, {
   *   calificacion: 4,
   *   comentario: 'Muy bueno, pero podr√≠a ser mejor'
   * });
   * 
   * =================================================================================
   */
  async updateReview(reviewId: number, review: Partial<Review>): Promise<boolean> {
    try {
      console.log('üîÑ Actualizando rese√±a:', reviewId);
      
      /**
       * PASO 1: ACTUALIZAR RESE√ëA EN BASE DE DATOS
       * Usa el DatabaseService para realizar la actualizaci√≥n
       */
      await this.databaseService.actualizarRese√±a(reviewId, review);
      
      console.log('‚úÖ Rese√±a actualizada exitosamente');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error actualizando rese√±a:', error);
      return false;
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE ELIMINACI√ìN DE RESE√ëAS
   * =================================================================================
   * 
   * FUNCI√ìN: deleteReview()
   * 
   * DESCRIPCI√ìN:
   * Elimina una rese√±a espec√≠fica de la base de datos.
   * 
   * PAR√ÅMETROS:
   * @param reviewId - ID de la rese√±a a eliminar
   * 
   * RETORNA:
   * @returns Promise<boolean> - true si la eliminaci√≥n fue exitosa, false si fall√≥
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Validar que reviewId sea v√°lido
   * 2. Llamar al DatabaseService para eliminar la rese√±a
   * 3. Manejar errores y retornar resultado
   * 
   * CONSIDERACIONES:
   * - La eliminaci√≥n es permanente
   * - No se puede deshacer
   * - Se elimina completamente de la base de datos
   * 
   * EJEMPLO DE USO:
   * const success = await reviewService.deleteReview(1);
   * if (success) { console.log('Rese√±a eliminada'); }
   * 
   * =================================================================================
   */
  async deleteReview(reviewId: number): Promise<boolean> {
    try {
      console.log('üîÑ Eliminando rese√±a:', reviewId);
      
      /**
       * PASO 1: ELIMINAR RESE√ëA DE BASE DE DATOS
       * Usa el DatabaseService para realizar la eliminaci√≥n
       */
      await this.databaseService.eliminarRese√±a(reviewId);
      
      console.log('‚úÖ Rese√±a eliminada exitosamente');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error eliminando rese√±a:', error);
      return false;
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE C√ÅLCULO DE CALIFICACI√ìN PROMEDIO
   * =================================================================================
   * 
   * FUNCI√ìN: getAverageRating()
   * 
   * DESCRIPCI√ìN:
   * Calcula la calificaci√≥n promedio de un anime basada en todas sus rese√±as.
   * 
   * PAR√ÅMETROS:
   * @param animeId - ID del anime del cual calcular promedio
   * 
   * RETORNA:
   * @returns Promise<number> - Calificaci√≥n promedio (0 si no hay rese√±as)
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Llamar al DatabaseService para calcular promedio
   * 2. Manejar errores y retornar 0 si falla
   * 3. Retornar promedio calculado
   * 
   * C√ÅLCULO:
   * - Suma todas las calificaciones del anime
   * - Divide por el n√∫mero total de rese√±as
   * - Retorna resultado con decimales
   * 
   * USO T√çPICO:
   * - Mostrar calificaci√≥n promedio en detalles del anime
   * - Ordenar animes por calificaci√≥n
   * - Generar estad√≠sticas
   * 
   * EJEMPLO DE USO:
   * const promedio = await reviewService.getAverageRating(123);
   * console.log(`Calificaci√≥n promedio: ${promedio.toFixed(1)}`);
   * 
   * =================================================================================
   */
  async getAverageRating(animeId: number): Promise<number> {
    try {
      console.log('üîç Calculando calificaci√≥n promedio para anime:', animeId);
      
      /**
       * PASO 1: CALCULAR PROMEDIO DESDE BASE DE DATOS
       * Usa el DatabaseService para realizar el c√°lculo con AVG()
       */
      const promedio = await this.databaseService.obtenerCalificacionPromedio(animeId);
      
      console.log('‚úÖ Calificaci√≥n promedio calculada:', promedio);
      return promedio;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo calificaci√≥n promedio:', error);
      return 0;
    }
  }

  /**
   * =================================================================================
   * M√âTODO DE VERIFICACI√ìN DE RESE√ëA EXISTENTE
   * =================================================================================
   * 
   * FUNCI√ìN: hasUserReviewedAnime()
   * 
   * DESCRIPCI√ìN:
   * Verifica si un usuario ya ha rese√±ado un anime espec√≠fico.
   * 
   * PAR√ÅMETROS:
   * @param userId - ID del usuario
   * @param animeId - ID del anime
   * 
   * RETORNA:
   * @returns Promise<boolean> - true si ya rese√±√≥, false si no
   * 
   * FLUJO DE EJECUCI√ìN:
   * 1. Llamar al DatabaseService para verificar existencia
   * 2. Manejar errores y retornar false si falla
   * 3. Retornar resultado de la verificaci√≥n
   * 
   * USO T√çPICO:
   * - Evitar rese√±as duplicadas
   * - Mostrar opci√≥n de editar en lugar de crear nueva
   * - Validar antes de permitir nueva rese√±a
   * 
   * EJEMPLO DE USO:
   * const yaRese√±o = await reviewService.hasUserReviewedAnime(1, 123);
   * if (yaRese√±o) {
   *   console.log('Ya rese√±√≥ este anime, mostrar opci√≥n de editar');
   * } else {
   *   console.log('Puede crear nueva rese√±a');
   * }
   * 
   * =================================================================================
   */
  async hasUserReviewedAnime(userId: number, animeId: number): Promise<boolean> {
    try {
      console.log('üîç Verificando si usuario ya rese√±√≥ anime:', userId, animeId);
      
      /**
       * PASO 1: VERIFICAR EXISTENCIA EN BASE DE DATOS
       * Usa el DatabaseService para realizar la verificaci√≥n con COUNT()
       */
      const yaRese√±o = await this.databaseService.usuarioYaRese√±o(userId, animeId);
      
      console.log(yaRese√±o ? '‚úÖ Usuario ya rese√±√≥ este anime' : '‚ùå Usuario no ha rese√±ado este anime');
      return yaRese√±o;
      
    } catch (error) {
      console.error('‚ùå Error verificando rese√±a:', error);
      return false;
    }
  }
}
